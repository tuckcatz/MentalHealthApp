import Foundation
import PDFKit
import UIKit

struct PDFExporter {
    static func createTrendPDF(from checkIns: [CheckIn], dateRange: ClosedRange<Date>) -> Data? {
        let pdfMetaData = [
            kCGPDFContextCreator: "MindTrack",
            kCGPDFContextAuthor: "Your App"
        ]
        let format = UIGraphicsPDFRendererFormat()
        format.documentInfo = pdfMetaData as [String: Any]

        let pageWidth = 612.0
        let pageHeight = 792.0
        let pageRect = CGRect(x: 0, y: 0, width: pageWidth, height: pageHeight)

        let renderer = UIGraphicsPDFRenderer(bounds: pageRect, format: format)

        let data = renderer.pdfData { context in
            context.beginPage()

            let margin: CGFloat = 20
            var y = margin

            func drawText(_ text: String, font: UIFont = .systemFont(ofSize: 14, weight: .regular)) {
                let attributes = [NSAttributedString.Key.font: font]
                let attributedText = NSAttributedString(string: text, attributes: attributes)
                attributedText.draw(at: CGPoint(x: margin, y: y))
                y += font.lineHeight + 8
            }

            let formatter = DateFormatter()
            formatter.dateStyle = .medium
            let start = formatter.string(from: dateRange.lowerBound)
            let end = formatter.string(from: dateRange.upperBound)

            drawText("Mood & Wellness Summary", font: .boldSystemFont(ofSize: 18))
            drawText("Report Period: \(start) – \(end)", font: .systemFont(ofSize: 14, weight: .medium))
            y += 10

            let moodAvg = checkIns.map { $0.moodRating }.average
            let energyAvg = checkIns.map { $0.energyLevel }.average
            let anxietyAvg = checkIns.map { $0.anxietyLevel }.average

            drawText("• Avg Mood: \(moodAvg)")
            drawText("• Avg Energy: \(energyAvg)")
            drawText("• Avg Anxiety: \(anxietyAvg)")

            let allFeelings = checkIns.flatMap { $0.feelings }
            let topWords = Dictionary(grouping: allFeelings, by: { $0 }).mapValues { $0.count }
                .sorted { $0.value > $1.value }
                .prefix(3)
                .map { $0.key }

            drawText("• Frequent Feelings: \(topWords.map { $0.word }.joined(separator: ", "))")
            
            let journalDays = checkIns.filter { !($0.journalText?.isEmpty ?? true) }
            let nonJournalDays = checkIns.filter { ($0.journalText?.isEmpty ?? true) }
            if !journalDays.isEmpty && !nonJournalDays.isEmpty {
                let journalAvg = journalDays.map { $0.moodRating }.average
                let nonJournalAvg = nonJournalDays.map { $0.moodRating }.average
                if journalAvg > nonJournalAvg {
                    drawText("• You felt better on days you journaled.")
                }
            }

            y += 10
            drawText("— Generated by MindTrack", font: .italicSystemFont(ofSize: 12))
        }

        return data
    }
}
